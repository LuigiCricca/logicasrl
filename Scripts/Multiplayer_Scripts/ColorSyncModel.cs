using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class ColorSyncModel
{

    [RealtimeProperty(1, false, false)] Color _currentColor; // questa proprietï¿½ permette dicapire come si comportaquesto modello. -- script che deo poi attaccare ad ungame object

}
/* ----- Begin Normal Autogenerated Code ----- */
public partial class ColorSyncModel : RealtimeModel {
    public UnityEngine.Color currentColor {
        get {
            return _currentColorProperty.value;
        }
        set {
            if (_currentColorProperty.value == value) return;
            _currentColorProperty.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public enum PropertyID : uint {
        CurrentColor = 1,
    }
    
    #region Properties
    
    private UnreliableProperty<UnityEngine.Color> _currentColorProperty;
    
    #endregion
    
    public ColorSyncModel() : base(null) {
        _currentColorProperty = new UnreliableProperty<UnityEngine.Color>(1, _currentColor);
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _currentColorProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _currentColorProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.CurrentColor: {
                    changed = _currentColorProperty.Read(stream, context);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _currentColor = currentColor;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
